name: build and deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env: 
      ARTIFACT_PATH: published_app
      TARGET_DEPLOY_PATH: published
      PROCESS_NAME: "TestApp.exe"

    environment: Release

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
            dotnet-version: '5.0.x'
        
      - name: build and publish the artifacts
        run: dotnet publish -r win-x64 -o $ARTIFACT_PATH
        
      - name: clone settings file
        run: cp $ARTIFACT_PATH/appsettings.sample.json $ARTIFACT_PATH/appsettings.json
          
      - name: populate settings
        uses: microsoft/variable-substitution@v1 
        with:
          files: ${{ env.ARTIFACT_PATH }}/appsettings.json
        env:
          Foo: Foo
          Bar.Baz: ${{ secrets.PORT }}
    
      - name: terminate remote process
        # don't stop in case the process isn't running and taskkill fails
        continue-on-error: true
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          envs: PROCESS_NAME
          script: taskkill -f -im $PROCESS_NAME
      
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: ${{ env.ARTIFACT_PATH }}
          target: ${{ env.TARGET_DEPLOY_PATH }}
          strip_components: 1
    
      - name: restart remote process
        # psexec returns an error status code even if the process starts correctly, use this to ignore it
        continue-on-error: true
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          envs: TARGET_DEPLOY_PATH, PROCESS_NAME
          # use -n with unzip to not ask to overwrite
          # extract session_id and use psexec instead of simply starting to create the process in the right gui session
          script: |
            cd $TARGET_DEPLOY_PATH
            curl -o pstools.zip https://download.sysinternals.com/files/PSTools.zip
            unzip -n pstools.zip
            session_id=$(query session | sed -nr 's/.+Administrator\s*([0-9]).+/\1/p')
            ./psexec -i $session_id -d -s -accepteula $PWD/$PROCESS_NAME